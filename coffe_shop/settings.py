"""
Django settings for coffe_shop project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys
import environ
import socket
import dj_database_url

# ==============================================================================
# ¬°¬°¬° ADVERTENCIA DE DEPURACI√ìN TEMPORAL !!!
# Se ha forzado DEBUG = True para diagnosticar un error en producci√≥n.
# Esto es INSEGURO y debe revertirse a DEBUG = False tan pronto como
# se identifique el error.
# ==============================================================================
# DEBUG = True # ¬°REVERTIDO!
# print("üî•üî•üî• MODO DEBUG FORZADO EN PRODUCCI√ìN üî•üî•üî•")

# ==============================================================================
# CONFIGURACI√ìN DIN√ÅMICA DE ALLOWED_HOSTS (Prioridad #1)
# Esto debe ejecutarse primero para evitar errores de DisallowedHost.
# ==============================================================================
print("üöÄ [settings.py] Iniciando configuraci√≥n...")

# Configuraci√≥n base segura
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'coffe-shop-production.eba-qvahx84p.us-east-2.elasticbeanstalk.com',
]

try:
    hostname = socket.gethostname()
    current_dir = os.getcwd()
    
    # Detecci√≥n robusta de AWS
    is_aws = 'ip-' in hostname or '/var/app' in current_dir
    
    if is_aws:
        print(f"üîç AWS DETECTADO (Hostname: {hostname})")
        
        # Agregar hostname de la instancia y su IP local
        if hostname not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(hostname)
        
        try:
            local_ip = socket.gethostbyname(hostname)
            if local_ip not in ALLOWED_HOSTS:
                ALLOWED_HOSTS.append(local_ip)
        except socket.gaierror:
            pass # No se pudo resolver, continuar

        # Asegurar que las IPs comunes de los health checkers est√©n
        common_aws_ips = ['172.31.20.200', '172.31.23.211', '172.31.45.200']
        for ip in common_aws_ips:
            if ip not in ALLOWED_HOSTS:
                ALLOWED_HOSTS.append(ip)
                
    else:
        print("üè† ENTORNO LOCAL detectado.")

except Exception as e:
    # Fallback ultra seguro en caso de error de detecci√≥n
    print(f"‚ö†Ô∏è ERROR de detecci√≥n, usando fallback: {e}")
    ALLOWED_HOSTS.append('*')

print(f"‚úÖ ALLOWED_HOSTS configurado para: {ALLOWED_HOSTS}")
# ==============================================================================

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Carga de variables de entorno desde .env
env = environ.Env()
env_path = os.path.join(BASE_DIR, ".env")
if os.path.exists(env_path):
    print(f"üìñ Leyendo variables de entorno desde: {env_path}")
    environ.Env.read_env(env_path)
else:
    print(f"ü§î No se encontr√≥ el archivo .env en: {env_path}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default="django-insecure-q$%rha$c@ux@!pvxu0(194)v9z&&ug@a8(m&1(rso^le-dc&5j")

# SECURITY WARNING: don't run with debug turned on in production!
# El modo DEBUG se establecer√° m√°s abajo, dependiendo del entorno.
# El modo DEBUG se establecer√° m√°s abajo, dependiendo del entorno.

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    "crispy_tailwind",
    "rest_framework",
    "products",
    "users",
    "orders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "coffe_shop.middleware.LanguageMiddleware",  # Nuestro middleware personalizado
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "coffe_shop.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "users", "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
                "django.template.context_processors.csrf",
            ],
        },
    },
]

WSGI_APPLICATION = "coffe_shop.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": env.db("DJANGO_DB_URL", default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}")
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "es"

LANGUAGES = [
    ("es", "Espa√±ol"),
    ("en", "English"),
    ("fr", "Fran√ßais"),
]

# Nombre expl√≠cito para la cookie de idioma
LANGUAGE_COOKIE_NAME = "django_language"
LANGUAGE_COOKIE_SAMESITE = "Lax"  # Recomendado para seguridad
LANGUAGE_COOKIE_PATH = "/"  # Asegura que la cookie de idioma se aplique a todo el sitio
LANGUAGE_COOKIE_DOMAIN = None  # Se aplica solo al dominio actual
LANGUAGE_COOKIE_SECURE = True if is_aws else False  # HTTPS en producci√≥n
LANGUAGE_COOKIE_HTTPONLY = True  # Mejora la seguridad

TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Ubicaci√≥n de los archivos de traducci√≥n
LOCALE_PATHS = [
    BASE_DIR / "locale",
]

# Crispy Forms configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

LOGIN_URL = "/usuarios/login/"
LOGIN_REDIRECT_URL = "products:product_list"
LOGOUT_REDIRECT_URL = "login"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Configuraci√≥n de archivos est√°ticos
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Directorio para archivos est√°ticos personalizados
]

# Configuraci√≥n de finders para archivos est√°ticos
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ==============================================================================
# Configuraci√≥n espec√≠fica del entorno (local vs. producci√≥n)
# ==============================================================================
is_aws = os.environ.get('IS_AWS_ENV', 'false').lower() == 'true'

if is_aws:
    print("üöÄ Aplicando configuraci√≥n de PRODUCCI√ìN para AWS.")
    DEBUG = False
    SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
    ALLOWED_HOSTS = ['*'] # Se permite todo porque EB gestiona el host a trav√©s del ELB

    # Configuraci√≥n de la base de datos desde la URL de la variable de entorno
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=600, ssl_require=False)
    }
    # Aseg√∫rate de que el motor de la base de datos sea el correcto para PostgreSQL
    DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'

else:
    print("üè† Aplicando configuraci√≥n de DESARROLLO LOCAL.")
    # La configuraci√≥n por defecto ya es adecuada para desarrollo
    pass
# ==============================================================================

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}

# ==============================================================================
# Configuraci√≥n de WhiteNoise para archivos est√°ticos
# ==============================================================================
# Usar WhiteNoise para servir archivos est√°ticos
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Configuraci√≥n adicional de WhiteNoise
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True if not is_aws else False

# Configuraci√≥n de compresi√≥n para archivos est√°ticos
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']

# Configuraci√≥n adicional para asegurar que los archivos del admin se sirvan correctamente
WHITENOISE_MAX_AGE = 31536000  # 1 a√±o para archivos est√°ticos
WHITENOISE_STATIC_PREFIX = '/static/'

# Configuraci√≥n para servir archivos de media con WhiteNoise
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True if not is_aws else False

# Configuraci√≥n espec√≠fica para archivos de media en AWS
if is_aws:
    # En producci√≥n, usar el mismo directorio para media que en desarrollo
    MEDIA_ROOT = '/var/app/current/media'
    MEDIA_URL = '/media/'
    
    # Configurar WhiteNoise para servir archivos de media
    WHITENOISE_STATIC_PREFIX = '/static/'
    
    # Agregar el directorio de media como un directorio est√°tico adicional
    import os
    STATICFILES_DIRS.append(('media', MEDIA_ROOT))
    
print(f"üîß WhiteNoise configurado para {'PRODUCCI√ìN' if is_aws else 'DESARROLLO'}")
