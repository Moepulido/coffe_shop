"""
Django settings for coffe_shop project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys
import environ

# from dotenv import load_dotenv  # Comentado temporalmente

# load_dotenv()  # Comentado temporalmente

# Agregar la ruta de PostgreSQL al PATH si existe
postgres_bin = os.path.join("C:", os.sep, "Program Files", "PostgreSQL", "17", "bin")
if os.path.exists(postgres_bin) and postgres_bin not in os.environ.get("PATH", ""):
    os.environ["PATH"] = os.environ.get("PATH", "") + os.pathsep + postgres_bin
    print(f"PostgreSQL agregado al PATH: {postgres_bin}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
env_path = os.path.join(BASE_DIR, ".env")
print(f"Intentando leer archivo .env desde: {env_path}")
print(f"¬øEl archivo existe?: {os.path.exists(env_path)}")
environ.Env.read_env(env_path)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-q$%rha$c@ux@!pvxu0(194)v9z&&ug@a8(m&1(rso^le-dc&5j"  # Usar directamente

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Usar directamente

# ALLOWED_HOSTS - Configuraci√≥n TOTALMENTE DIN√ÅMICA para AWS
print("üîß CONFIGURANDO ALLOWED_HOSTS din√°micamente...")

# Configuraci√≥n base segura
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'coffe-shop-production.eba-qvahx84p.us-east-2.elasticbeanstalk.com',  # Tu CNAME oficial
]

try:
    import socket
    hostname = socket.gethostname()
    current_dir = str(os.getcwd())
    
    print(f"üñ•Ô∏è  Hostname: {hostname}")
    print(f"üñ•Ô∏è  Current dir: {current_dir}")
    
    # DETECCI√ìN INTELIGENTE DE AWS
    is_aws = any([
        'ip-' in hostname,           # Hostname t√≠pico de AWS: ip-172-31-20-200
        '/var/app' in current_dir,   # Directorio t√≠pico de AWS EB
        not os.path.exists('C:\\'),  # Sistema Linux (no Windows)
        'ec2' in hostname.lower(),   # Si contiene 'ec2'
    ])
    
    if is_aws:
        print("üîç ¬°AWS DETECTADO! Aplicando configuraci√≥n din√°mica...")
        
        # Agregar hostname actual autom√°ticamente
        if hostname not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(hostname)
            print(f"‚úÖ Agregado hostname: {hostname}")
        
        # Permitir rangos de IP comunes de AWS de forma segura
        # Solo IPs privadas de AWS (m√°s seguro que '*')
        aws_ips = []
        
        # Obtener IP local del servidor
        try:
            # Conectar a internet para obtener IP local
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            s.close()
            
            if local_ip not in ALLOWED_HOSTS:
                ALLOWED_HOSTS.append(local_ip)
                print(f"‚úÖ Agregada IP local: {local_ip}")
        except:
            print("‚ö†Ô∏è  No se pudo obtener IP local")
        
        # Permitir IPs t√≠picas de AWS que hemos visto
        common_aws_ips = [
            '172.31.20.200',  # IP interna conocida
            '172.31.23.211',  # Otra IP interna de logs anteriores  
            '172.31.45.200',  # Otra IP interna de logs anteriores
        ]
        
        for ip in common_aws_ips:
            if ip not in ALLOWED_HOSTS:
                ALLOWED_HOSTS.append(ip)
        
        print(f"‚úÖ AWS MODE: {len(ALLOWED_HOSTS)} hosts permitidos")
        
    else:
        print("üè† DESARROLLO LOCAL detectado")
    
    print(f"üîí ALLOWED_HOSTS final: {ALLOWED_HOSTS}")
    
except Exception as e:
    print(f"‚ö†Ô∏è  Error en detecci√≥n din√°mica: {e}")
    # Fallback seguro: usar configuraci√≥n permisiva temporal
    ALLOWED_HOSTS = ['*']
    print("üö® FALLBACK: Usando ALLOWED_HOSTS = ['*'] por error")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    "crispy_tailwind",
    "rest_framework",
    "products",
    "users",
    "orders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "coffe_shop.middleware.LanguageMiddleware",  # Nuestro middleware personalizado
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "coffe_shop.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "users", "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
                "django.template.context_processors.csrf",
            ],
        },
    },
]

WSGI_APPLICATION = "coffe_shop.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {"default": env.db("DJANGO_DB_URL")}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "es"

LANGUAGES = [
    ("es", "Espa√±ol"),
    ("en", "English"),
    ("fr", "Fran√ßais"),
]

# Nombre expl√≠cito para la cookie de idioma
LANGUAGE_COOKIE_NAME = "django_language"
LANGUAGE_COOKIE_SAMESITE = "Lax"  # Recomendado para seguridad
LANGUAGE_COOKIE_PATH = "/"  # Asegura que la cookie de idioma se aplique a todo el sitio
LANGUAGE_COOKIE_DOMAIN = None  # Se aplica solo al dominio actual
LANGUAGE_COOKIE_SECURE = False  # En producci√≥n deber√≠a ser True si usas HTTPS
LANGUAGE_COOKIE_HTTPONLY = True  # Mejora la seguridad

TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Ubicaci√≥n de los archivos de traducci√≥n
LOCALE_PATHS = [
    BASE_DIR / "locale",
]

# Crispy Forms configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

LOGIN_URL = "/usuarios/login/"
LOGIN_REDIRECT_URL = "products:product_list"
LOGOUT_REDIRECT_URL = "login"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = []  # Temporalmente vac√≠o para evitar errores

# Media files
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}

# Configuraci√≥n espec√≠fica para AWS Elastic Beanstalk
# Simplificada temporalmente - detectar si estamos en servidor
if '/var/app' in str(os.getcwd()) or not os.path.exists('C:\\'):  # Detectar Linux/AWS vs Windows
    # Configuraci√≥n para AWS (sin RDS por ahora, usando SQLite)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    
    # Configuraci√≥n de seguridad para producci√≥n
    DEBUG = False
    print("üîç AWS/LINUX DETECTADO - Configuraci√≥n de producci√≥n aplicada")
    
    # Configuraci√≥n de archivos est√°ticos para producci√≥n
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
